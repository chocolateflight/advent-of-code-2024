from pathlib import Path 
import re

file_path = Path(__file__).with_name("input.txt")
with file_path.open("r") as f:
    file_content = f.read()

# -----General----

def multiply(input):
  sum = 0
  for item in input:
    sum += (item[0]*item[1])
  return sum
  
def find_pattern(input, p1):
    pattern1 = re.compile(p1, re.IGNORECASE)
    new_content = pattern1.findall(input)
    return new_content
  
def process_pattern(input, p2):
  pattern2 = re.compile(p2, re.IGNORECASE)
  numbers = [pattern2.findall(item)[0].split(",") for item in input]
  numbers = [[int(item[0]), int(item[1])] for item in numbers]
  return numbers

number_pattern = r"[0-9]{1,3},[0-9]{1,3}"
  
# -----Code Part 1-----
pattern1_part1 = r"mul\([0-9]{1,3},[0-9]{1,3}\)"

combination1 = find_pattern(file_content, pattern1_part1)
processed_combnination1 = process_pattern(combination1, number_pattern)
part1_result = multiply(processed_combnination1)

print(part1_result)

# -----Code Part 2-----
pattern1_part2 = r"mul\([0-9]{1,3},[0-9]{1,3}\)|do\(\)|don't\(\)"

def clean_instructions(input):
  skip = False
  instructions = []
  
  for item in input:
    if item == "don't()":
      skip = True
    elif item == "do()":
      skip = False
    elif not skip:
      instructions.append(item)
      
  return instructions
  

combination2 = find_pattern(file_content, pattern1_part2)
clean_combinations = clean_instructions(combination2)
processed_combnination2 = process_pattern(clean_combinations, number_pattern)
part2_result = multiply(processed_combnination2)

print(part2_result)

# -----Documentation-----
# This code for this challenge was written without the help of AI. The documentation was generated by ChatGPT.

"""
# Documentation for the Code

This script processes a file named `input.txt` to extract and process specific patterns in the text. The goal is to perform arithmetic operations based on extracted data while following specified rules for inclusion and exclusion.

## Input File Format
- The input file is named `input.txt` and is expected to be in the same directory as this script.
- It contains text with patterns such as `mul(12,34)`, `do()`, and `don't()`.

## Workflow

### 1. Read and Parse Input
- Reads the entire file content into the `file_content` variable as a single string.

### 2. General Utility Functions
The script defines the following utility functions to process data:

#### Function: `multiply`
**Parameters**:
- `input` (list of lists): Each sublist contains two integers.

**Returns**:
- Sum of the products of the paired integers in all sublists.

#### Function: `find_pattern`
**Parameters**:
- `input` (string): The text to search.
- `p1` (string): Regular expression pattern to match.

**Returns**:
- A list of strings matching the given pattern.

#### Function: `process_pattern`
**Parameters**:
- `input` (list of strings): A list of matched strings.
- `p2` (string): A regular expression pattern to extract numerical pairs.

**Returns**:
- A list of lists, where each sublist contains two integers extracted from the matched patterns.

### 3. Part 1: Basic Multiplication
#### Goal:
- Extract patterns matching `mul(12,34)`.
- Compute the sum of the products of the paired numbers.

#### Steps:
1. Define the regex pattern for `mul(x,y)` calls: `pattern1_part1`.
2. Use `find_pattern` to extract matching strings.
3. Process the matches with `process_pattern` to extract numerical pairs.
4. Calculate the result using `multiply`.

#### Output:
- Prints the computed result of Part 1.

### 4. Part 2: Conditional Multiplication
#### Goal:
- Handle patterns matching `mul(12,34)`, `do()`, and `don't()`.
- Skip multiplication patterns between `don't()` and `do()` instructions.

#### Steps:
1. Define the regex pattern for `mul(x,y)` calls and control statements: `pattern1_part2`.
2. Use `find_pattern` to extract matching strings.
3. Use `clean_instructions` to:
   - Skip `mul(x,y)` patterns between `don't()` and the next `do()`.
   - Include all other valid `mul(x,y)` patterns.
4. Process the cleaned list with `process_pattern` to extract numerical pairs.
5. Calculate the result using `multiply`.

#### Function: `clean_instructions`
**Parameters**:
- `input` (list of strings): List of matched strings, including control statements.

**Returns**:
- A filtered list of `mul(x,y)` strings, skipping those marked by `don't()` instructions.

#### Output:
- Prints the computed result of Part 2.

## Dependencies
- `pathlib.Path` for file handling.
- `re` for regex pattern matching.

## Key Patterns
- **`mul(x,y)`**: Extracts numerical pairs for multiplication.
- **`do()` and `don't()`**: Control whether subsequent `mul(x,y)` patterns are included.

## Outputs
- The script prints two integers:
  1. The result of Part 1's computation.
  2. The result of Part 2's computation, factoring in control statements.

## Notes
- The script assumes valid input formatting in `input.txt`.
- It handles control statements (`do()`, `don't()`) to skip or include patterns dynamically in Part 2.
"""